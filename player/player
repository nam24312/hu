<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Ph√°t video (YouTube + Rumble)</title>
  <link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />
  <style>
    body{
      background:#111;color:#fff;font-family:sans-serif;
      display:flex;align-items:center;justify-content:center;
      height:100vh;margin:0;
    }
    .plyr__video-embed iframe{top:-50%;height:200%;position:relative;}
    .container{max-width:800px;aspect-ratio:16/9;width:100%;}
  </style>
</head>
<body>

<div class="container">
  <div class="plyr__video-embed" id="player">
    <iframe src="" allowfullscreen allow="autoplay"></iframe>
  </div>
</div>

<script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>
<script>
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get('token');

  // üö´ Ch·∫∑n truy c·∫≠p n·∫øu thi·∫øu/sai token
  if (token !== 'ok') {
    document.body.innerHTML =
      "<h2 style='color:white;text-align:center'>üö´ Truy c·∫≠p kh√¥ng h·ª£p l·ªá!</h2>";
    throw new Error("Truy c·∫≠p b·ªã ch·∫∑n: thi·∫øu ho·∫∑c sai token");
  }

  /* ------------ X√°c ƒë·ªãnh n·ªÅn t·∫£ng & l·∫•y ID ------------ */
  let rawVideo = urlParams.get('video');        // c√≥ th·ªÉ l√† ID ho·∫∑c URL
  let provider  = 'youtube';                    // m·∫∑c ƒë·ªãnh
  let videoId   = '';

  if (rawVideo && rawVideo.includes('http')) {
    try {
      const decoded = decodeURIComponent(rawVideo);
      const urlObj  = new URL(decoded);

      // T·ª± ƒë·ªông nh·∫≠n d·∫°ng domain
      if (urlObj.hostname.includes('rumble.com')) provider = 'rumble';
      if (urlObj.hostname.includes('youtu'))      provider = 'youtube';

      if (provider === 'youtube') {
        videoId = urlObj.hostname.includes('youtu.be')
          ? urlObj.pathname.slice(1)              // youtu.be/<id>
          : urlObj.searchParams.get('v');         // youtube.com/watch?v=<id>
      } else { // rumble
        /* path d·∫°ng /v3k5kfy-video-tua-gi.html
           => c·∫Øt ƒëo·∫°n sau d·∫•u ‚Äú/‚Äù, l·∫•y ph·∫ßn tr∆∞·ªõc ‚Äú-‚Äù ho·∫∑c ‚Äú.html‚Äù */
        const filePart = urlObj.pathname.split('/').pop();   // v3k5kfy-video.html
        videoId = filePart.split('-')[0].replace('.html',''); // v3k5kfy
      }
    } catch(e) {
      console.error('Kh√¥ng th·ªÉ ph√¢n t√≠ch video URL:', e);
    }
  } else {
    // Tr∆∞·ªùng h·ª£p ch·ªâ chuy·ªÅn ID th√¥
    videoId = rawVideo;
  }

  /* ------------ G·∫Øn iframe theo n·ªÅn t·∫£ng ------------ */
  const iframe = document.querySelector('#player iframe');
  if (provider === 'youtube') {
    iframe.src =
      `https://www.youtube.com/embed/${videoId}` +
      `?rel=0&modestbranding=1&showinfo=0&enablejsapi=1`;
    new Plyr('#player');           // Plyr h·ªó tr·ª£ s·∫µn YouTube
  } else if (provider === 'rumble') {
    iframe.src = `https://rumble.com/embed/${videoId}/?rel=0`;
    // Plyr ch∆∞a h·ªó tr·ª£ Rumble ‚ñ∫ kh√¥ng kh·ªüi t·∫°o Plyr ƒë·ªÉ tr√°nh l·ªói
  } else {
    document.body.innerHTML =
      "<h2 style='color:white;text-align:center'>‚ùì Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c n·ªÅn t·∫£ng!</h2>";
  }
</script>

</body>
</html>

